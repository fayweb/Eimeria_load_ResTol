data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome, color=Days))
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
library(dplyr)
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
library(dplyr)
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
library(dplyr)
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
library(dplyr)
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(shape=21, size=2.5, aes(fill= Days), color= "black")+
data_Fig2 <- read.csv("Untitled/Sheet 2-Table 1.csv")
data_Fig2$No..Of.chromosome = as.numeric(data_Fig2$No..Of.chromosome)
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome,color=Days))
data_Fig2%>%
ggplot(aes(x=Days, y=No..Of.chromosome))+
geom_point(color="tomato", size=3)
data = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
write.csv(data,"challange_infections.csv" )
View(data)
dataa <- data[data$EH_ID %in% c("LM0180", "LM0182","LM0184","LM0185","LM0186","LM0195","LM0228","LM0229","LM0238", "LM0191",
"LM0240","LM0246","LM0247","LM0194","LM0190","LM0199","LM0197","LM0198","LM0188","LM0254","LM0192"),]
data_E57 = read.csv("https://github.com/derele/Eimeria_Lab/blob/master/data_products/Quant2_E57.csv")
write.csv(data_E57,"Quant2_E57")
write.csv(data_E57,"Quant2_E57.csv")
data_E57 = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Quant2_E57.csv")
write.csv(data_E57,"Quant2_E57.csv")
View(dataa)
library(dplyr)
library(tidyverse)
data = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
challenge <- data[data$EH_ID %in% c("LM0180", "LM0182","LM0184","LM0185","LM0186","LM0195","LM0228","LM0229","LM0238", "LM0191",
"LM0240","LM0246","LM0247","LM0194","LM0190","LM0199","LM0197","LM0198","LM0188","LM0254","LM0192"),]
challenge <- challenge %>%
dplyr::filter(infection == "challenge")
View(challenge)
write.csv(challenge,"Quant2_challenge.csv")
source("~/Documents/GitHub/Eimeria_Quant2/R_Python_Scripts/2_Challange_infections/1_Sample_selection.R", echo=TRUE)
View(challenge)
setwd("~/Documents/GitHub/Eimeria_Quant2")
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
Nanodrop <- read.csv("Raw_Data/E64_challenged_Nanodrop.csv")
View(Nanodrop)
View(fecweight)
#remove columns
fecweight <- fecweight[-c(1)]
Nanodrop <- Nanodrop[-c(1,3)]
colnames(Nanodrop)
Nanodrop %>% rename(
DNA_Conc_ngµl = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID)
Nanodrop %>% rename(
DNA_Conc_ngµl = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID) -> Nanodrop
##create subset
Nanodrop2 <- Nanodrop[Nanodrop$EH_ID %in% c("LM0258", "LM0259"),]
View(Nanodrop2)
Nanodrop$labels = paste('E57by',Nanodrop$Sample_ID, sep = '')
rm(Nanodrop2)
Nanodrop <- read.csv("Raw_Data/E64_challenged_Nanodrop.csv")
#remove and rename columns
fecweight <- fecweight[-c(1)]
Nanodrop <- Nanodrop[-c(1,3)]
Nanodrop %>% rename(
DNA_Conc_ngµl = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID) -> Nanodrop
Nanodrop$labels = paste('E57by',Nanodrop$labels, sep = '')
write.csv(challenge,"E64_challenged.csv")
Nanodrop %>% rename(
labels$E57byKLT = labels$E57byKlt) -> Nanodrop
Nanodrop %>% rename(
E57byKLT = E57byKlt) -> Nanodrop
#load fecal_weight and Nanodrop data
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
View(fecweight)
#merge fecal data with main challenge
challenge.1 = left_join(challenge, fecweight)
View(challenge.1)
#load fecal_weight and Nanodrop data
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
#remove and rename columns
fecweight <- fecweight[-c(1)]
#merge fecal data with main challenge
challenge.1 = left_join(challenge, fecweight)
#rename mislabelled samples in nanodrop
Nanodrop %>% rename(
E57byLNT = E57byLKT,
E57byOSZ = E57byDSZ,
E57byAVW = E57byAVM) -> Nanodrop
#rename mislabelled samples in nanodrop
Nanodrop %>% rename(
labels$E57byLNT = labels$E57byLKT,
labels$E57byOSZ = labels$E57byDSZ,
labels$E57byAVW = labels$E57byAVM) -> Nanodrop
#rename mislabelled samples in nanodrop
Nanodrop$labels[c(E57byLKT,E57byDSZ)] <- c(E57byLNT,E57byOSZ)
#rename mislabelled samples in nanodrop
Nanodrop$labels[c('E57byLKT','E57byDSZ')] <- c('E57byLNT','E57byOSZ')
#rename mislabelled samples in nanodrop
Nanodrop$labels[Nanodrop$labels == "E57byLKT"] <- "E57byLNT"
Nanodrop$labels[Nanodrop$labels == "E57byDSZ"] <- "E57byOSZ"
Nanodrop$labels[Nanodrop$labels == "E57byAVM"] <- "E57byAVW"
rm(challenge.1)
#remove 5 charters from column label and replace with E57by to allow merge with Nanodrop (alteration fixed later)
challenge$labels<-gsub("E57bx","",as.character(challenge$labels))
challenge$labels<-gsub("E57by","",as.character(challenge$labels))
challenge$labels = paste('E57by',challenge$labels, sep = '')
#merge Nanodrop data with main challenge
challenge = left_join(challenge, Nanodrop)
##rename MICE LM0258 & LM0259 as E57bxAAA (the rest are E57byAAA)
challenge$labels[challenge$EH_ID == "LM0258"] <- gsub("E57by","",as.character(challenge$labels))
##rename MICE LM0258 & LM0259 as E57bxAAA (the rest are E57byAAA)
challenge$labels[challenge$EH_ID == "LM0258"] <- gsub("E57by","")
challenge$labels[challenge$EH_ID == "LM0259"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0259"] <- paste('E57bx',challenge$labels, sep = '')
challenge$labels[challenge$EH_ID == "LM0258"] <- paste('E57bx',challenge$labels, sep = '')
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
rm(Nanodrop, fecweight,data)
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
class (challenge)
class (challenge$oocyst_sq1)
challenge <- sapply(challenge$oocyst_sq1, as.numeric)
class (challenge$oocyst_sq1)
library(dplyr)
library(tidyverse)
data = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
challenge <- data[data$EH_ID %in% c("LM0258", "LM0259","LM0260","LM0262",
"LM0265","LM0269","LM0270","LM0279","LM0280", "LM0284"),]
challenge <- challenge %>%
dplyr::filter(infection == "challenge")
##write.csv(challenge,"E64_challenged.csv")
#load fecal weight data
weight <- read.csv("Raw_Data/qPCR_fecal_mass_E64_2ry.csv")
#load fecal_weight and Nanodrop data
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
Nanodrop <- read.csv("Raw_Data/E64_challenged_Nanodrop.csv")
#remove and rename columns
fecweight <- fecweight[-c(1)]
Nanodrop <- Nanodrop[-c(1,3)]
Nanodrop %>% rename(
DNA_Conc_ngµl = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID) -> Nanodrop
Nanodrop$labels = paste('E57by',Nanodrop$labels, sep = '')
#merge fecal data with main challenge
challenge = left_join(challenge, fecweight)
#rename mislabelled samples in nanodrop
Nanodrop$labels[Nanodrop$labels == "E57byLKT"] <- "E57byLNT"
Nanodrop$labels[Nanodrop$labels == "E57byDSZ"] <- "E57byOSZ"
Nanodrop$labels[Nanodrop$labels == "E57byAVM"] <- "E57byAVW"
#remove 5 charters from column label and replace with E57by to allow merge with Nanodrop (alteration fixed later)
challenge$labels<-gsub("E57bx","",as.character(challenge$labels))
challenge$labels<-gsub("E57by","",as.character(challenge$labels))
challenge$labels = paste('E57by',challenge$labels, sep = '')
#merge Nanodrop data with main challenge
challenge = left_join(challenge, Nanodrop)
##rename MICE LM0258 & LM0259 as E57bxAAA (the rest are E57byAAA)
challenge$labels[challenge$EH_ID == "LM0258"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0258"] <- paste('E57bx',challenge$labels, sep = '')
challenge$labels[challenge$EH_ID == "LM0259"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0259"] <- paste('E57bx',challenge$labels, sep = '')
rm(Nanodrop, fecweight,data)
class (challenge$oocyst_sq1)
challenge$oocyst_sq1 <- as.numeric(as.character(challenge$oocyst_sq1))
class (challenge$oocyst_sq1)
class (challenge$dilution)
challenge$oocyst_sq1 <- as.numeric(as.character(challenge$oocyst_sq1))
challenge$oocyst_sq2 <- as.numeric(as.character(challenge$oocyst_sq2))
challenge$oocyst_sq3 <- as.numeric(as.character(challenge$oocyst_sq3))
challenge$oocyst_sq4 <- as.numeric(as.character(challenge$oocyst_sq4))
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
challenge %>% rename(
fecweight_flot = feces_weight) -> Nanodrop
rm(Nanadrop)
challenge %>% rename(
fecweight_flot = feces_weight) -> challenge
rm(Nanodrop)
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
##Check for spaces
sample.data$EH_ID <- gsub(pattern = " ", replacement = "", x = sample.data$EH_ID)
data = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
challenge <- data[data$EH_ID %in% c("LM0258", "LM0259","LM0260","LM0262",
"LM0265","LM0269","LM0270","LM0279","LM0280", "LM0284"),]
challenge <- challenge %>%
dplyr::filter(infection == "challenge")
##write.csv(challenge,"E64_challenged.csv")
#load fecal weight data
weight <- read.csv("Raw_Data/qPCR_fecal_mass_E64_2ry.csv")
#load fecal_weight and Nanodrop data
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
Nanodrop <- read.csv("Raw_Data/E64_challenged_Nanodrop.csv")
#remove and rename columns
fecweight <- fecweight[-c(1)]
Nanodrop <- Nanodrop[-c(1,3)]
Nanodrop %>% rename(
Conc_DNA = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID) -> Nanodrop
Nanodrop$labels = paste('E57by',Nanodrop$labels, sep = '')
#merge fecal data with main challenge
challenge = left_join(challenge, fecweight)
#rename mislabelled samples in nanodrop
Nanodrop$labels[Nanodrop$labels == "E57byLKT"] <- "E57byLNT"
Nanodrop$labels[Nanodrop$labels == "E57byDSZ"] <- "E57byOSZ"
Nanodrop$labels[Nanodrop$labels == "E57byAVM"] <- "E57byAVW"
#remove 5 charters from column label and replace with E57by to allow merge with Nanodrop (alteration fixed later)
challenge$labels<-gsub("E57bx","",as.character(challenge$labels))
challenge$labels<-gsub("E57by","",as.character(challenge$labels))
challenge$labels = paste('E57by',challenge$labels, sep = '')
#merge Nanodrop data with main challenge
challenge = left_join(challenge, Nanodrop)
##rename MICE LM0258 & LM0259 as E57bxAAA (the rest are E57byAAA)
challenge$labels[challenge$EH_ID == "LM0258"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0258"] <- paste('E57bx',challenge$labels, sep = '')
challenge$labels[challenge$EH_ID == "LM0259"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0259"] <- paste('E57bx',challenge$labels, sep = '')
rm(Nanodrop, fecweight,data)
####################################################
challenge$oocyst_sq1 <- as.numeric(as.character(challenge$oocyst_sq1))
challenge$oocyst_sq2 <- as.numeric(as.character(challenge$oocyst_sq2))
challenge$oocyst_sq3 <- as.numeric(as.character(challenge$oocyst_sq3))
challenge$oocyst_sq4 <- as.numeric(as.character(challenge$oocyst_sq4))
challenge %>% rename(
fecweight_flot = feces_weight) -> challenge
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
##Check for spaces
sample.data$EH_ID <- gsub(pattern = " ", replacement = "", x = sample.data$EH_ID)
##Check for spaces
challenge$EH_ID <- gsub(pattern = " ", replacement = "", x = challenge$EH_ID)
challenge %>% rename(
fecweight_flot = feces_weight,
fecweight_DNA = fecweight_qPCR) -> challenge
library(dplyr)
library(tidyverse)
data = read.csv("https://raw.githubusercontent.com/derele/Eimeria_Lab/master/data_products/Challenge_infections.csv")
challenge <- data[data$EH_ID %in% c("LM0258", "LM0259","LM0260","LM0262",
"LM0265","LM0269","LM0270","LM0279","LM0280", "LM0284"),]
challenge <- challenge %>%
dplyr::filter(infection == "challenge")
##write.csv(challenge,"E64_challenged.csv")
#load fecal weight data
weight <- read.csv("Raw_Data/qPCR_fecal_mass_E64_2ry.csv")
#load fecal_weight and Nanodrop data
fecweight <- read.csv("Raw_Data/E64_challenged_fecweight.csv")
Nanodrop <- read.csv("Raw_Data/E64_challenged_Nanodrop.csv")
#remove and rename columns
fecweight <- fecweight[-c(1)]
Nanodrop <- Nanodrop[-c(1,3)]
Nanodrop %>% rename(
Conc_DNA = Nucleic.Acid.Conc...ng.µl.,
labels = Sample.ID) -> Nanodrop
Nanodrop$labels = paste('E57by',Nanodrop$labels, sep = '')
#merge fecal data with main challenge
challenge = left_join(challenge, fecweight)
#rename mislabelled samples in nanodrop
Nanodrop$labels[Nanodrop$labels == "E57byLKT"] <- "E57byLNT"
Nanodrop$labels[Nanodrop$labels == "E57byDSZ"] <- "E57byOSZ"
Nanodrop$labels[Nanodrop$labels == "E57byAVM"] <- "E57byAVW"
#remove 5 charters from column label and replace with E57by to allow merge with Nanodrop (alteration fixed later)
challenge$labels<-gsub("E57bx","",as.character(challenge$labels))
challenge$labels<-gsub("E57by","",as.character(challenge$labels))
challenge$labels = paste('E57by',challenge$labels, sep = '')
#merge Nanodrop data with main challenge
challenge = left_join(challenge, Nanodrop)
##rename MICE LM0258 & LM0259 as E57bxAAA (the rest are E57byAAA)
challenge$labels[challenge$EH_ID == "LM0258"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0258"] <- paste('E57bx',challenge$labels, sep = '')
challenge$labels[challenge$EH_ID == "LM0259"] <- gsub("E57by","",as.character(challenge$labels))
challenge$labels[challenge$EH_ID == "LM0259"] <- paste('E57bx',challenge$labels, sep = '')
rm(Nanodrop, fecweight,data)
####################################################
challenge$oocyst_sq1 <- as.numeric(as.character(challenge$oocyst_sq1))
challenge$oocyst_sq2 <- as.numeric(as.character(challenge$oocyst_sq2))
challenge$oocyst_sq3 <- as.numeric(as.character(challenge$oocyst_sq3))
challenge$oocyst_sq4 <- as.numeric(as.character(challenge$oocyst_sq4))
challenge %>% rename(
fecweight_flot = feces_weight,
fecweight_DNA = fecweight_qPCR) -> challenge
###Use function from Alice Balard to calculate OPG
#volume of each large square (1mm x 1mm x 0.1mm height = 0.1mm3)
#0.1mm3 = 0.1µl (x10000 when converted into ml)
#https://www.emsdiasum.com/microscopy/technical/datasheet/68052-14.aspx <- explanation
calculateOPG <- function(challenge){
challenge$mean_Neubauer <-
(challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4) / 4
# NB! Limit of detection = 1 oocysts
challenge$mean_Neubauer[challenge$oocyst_sq1 + challenge$oocyst_sq2 + challenge$oocyst_sq3 + challenge$oocyst_sq4 == 1] <- 0
challenge$oocysts.per.tube <- challenge$mean_Neubauer * 10000 * challenge$dilution
challenge$OPG <- challenge$oocysts.per.tube / challenge$fecweight_flot
## If we don't have the fecal weight BUT we counted in Neubauer chamber 0, then OPG = 0
challenge$oocysts.per.tube[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
challenge$OPG[challenge$fecweight_flot == 0 & challenge$mean_Neubauer == 0] <- 0
return(challenge)
}
challenge <- calculateOPG(challenge = challenge)
##Check for spaces
challenge$EH_ID <- gsub(pattern = " ", replacement = "", x = challenge$EH_ID)
challenge %>%
mutate(Total_DNA = (challenge$Conc_DNA*40)*0.001) -> challenge ### Add a new variable that will contain total DNA extracted per sample in µg
challenge %>%
mutate(Microbial_density = challenge$Total_DNA/(challenge$fecweight_DNA*1000)) -> challenge ### Total DNA extracted per sample in µg by feces weight in mg
challenge$labels<- as.vector(challenge$labels)
rownames(challenge) <- make.unique(challenge$labels)
##Merge qPCR data
#Ms. Fay Webster's function was adpated to merge all qPCR files into one
setwd("Raw_Data/qPCR/qPCR_Secondary/")
#all individual qPCR.csv files form a list
list_faeces <- as.list(list.files())
#to all a function to perform itself on the list, it is transformed into a vector
list_names <- as.vector(unlist(list_faeces))
#function set by Fay Webster to deleted rows 1 to 24 and set a new column that
#includes the file name i.e. date of qPCR experiment
read_qPCR_file <- function(x) {
df1 = read_csv(x)
filename <- colnames(df1[2])
df1 <- df1 %>%
filter(!row_number() %in% c(1:24))
colnames(df1) <- df1[1, ]
df1 <- df1 %>% filter(!row_number() %in% 1)
df1 <- df1 %>% dplyr::mutate(plate = filename)
}
list_results <- lapply(list_names, read_qPCR_file)
#bind/merge all indivual csv files into one
df_results <- Reduce(rbind, list_results)
list_faeces <- as.list(list.files())
#to all a function to perform itself on the list, it is transformed into a vector
list_names <- as.vector(unlist(list_faeces))
#function set by Fay Webster to deleted rows 1 to 24 and set a new column that
#includes the file name i.e. date of qPCR experiment
read_qPCR_file <- function(x) {
df1 = read_csv(x)
filename <- colnames(df1[2])
df1 <- df1 %>%
filter(!row_number() %in% c(1:24))
colnames(df1) <- df1[1, ]
df1 <- df1 %>% filter(!row_number() %in% 1)
df1 <- df1 %>% dplyr::mutate(plate = filename)
}
list_results <- lapply(list_names, read_qPCR_file)
#bind/merge all indivual csv files into one
df_results <- Reduce(rbind, list_results)
#removes duplicates
df_results <- unique(df_results)
list_results <- lapply(list_names, read_qPCR_file)
#all individual qPCR.csv files form a list
list_faeces <- as.list(list.files())
View(list_faeces)
#to all a function to perform itself on the list, it is transformed into a vector
list_names <- as.vector(unlist(list_faeces))
#function set by Fay Webster to deleted rows 1 to 24 and set a new column that
#includes the file name i.e. date of qPCR experiment
read_qPCR_file <- function(x) {
df1 = read_csv(x)
filename <- colnames(df1[2])
df1 <- df1 %>%
filter(!row_number() %in% c(1:24))
colnames(df1) <- df1[1, ]
df1 <- df1 %>% filter(!row_number() %in% 1)
df1 <- df1 %>% dplyr::mutate(plate = filename)
}
View(read_qPCR_file)
list_results <- lapply(list_names, read_qPCR_file)
View(list_faeces)
library(dplyr)
library(tidyverse)
library(tidyr)
library(readr)
#all individual qPCR.csv files form a list
list_faeces <- as.list(list.files())
#to all a function to perform itself on the list, it is transformed into a vector
list_names <- as.vector(unlist(list_faeces))
#function set by Fay Webster to deleted rows 1 to 24 and set a new column that
#includes the file name i.e. date of qPCR experiment
read_qPCR_file <- function(x) {
df1 = read_csv(x)
filename <- colnames(df1[2])
df1 <- df1 %>%
filter(!row_number() %in% c(1:24))
colnames(df1) <- df1[1, ]
df1 <- df1 %>% filter(!row_number() %in% 1)
df1 <- df1 %>% dplyr::mutate(plate = filename)
}
list_results <- lapply(list_names, read_qPCR_file)
#bind/merge all indivual csv files into one
df_results <- Reduce(rbind, list_results)
#removes duplicates
df_results <- unique(df_results)
